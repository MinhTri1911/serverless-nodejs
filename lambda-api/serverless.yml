# Service Name
service: ticket-service

# plugins
plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-1
  profile: ${file(env.yml):profile}
  environment: ${file(env.yml):environment}

# custom
custom:
  serverless-offline:
    port: 4000
  webpack:
    webpackConfig: ./webpack.config.js
#    includeModules: true
  webpackIncludeModules:
      forceInclude:
        - pg

functions:
  authorize:
    handler: middleware/Authentication.handler

  getAllMembers:
    handler: controller/MemberController.getAllMembers
    name: getAllMembers
    events:
      - http:
          path: member
          method: get

  postMember:
    handler: controller/MemberController.postMember
    name : postMember
    events:
      - http:
          path: member
          method: post

  deleteMember:
    handler: controller/MemberController.deleteMember
    name: deleteMember
    events:
      - http:
          path: member/{Id}
          method: delete

  updateMember:
    handler: controller/MemberController.updateMember
    name: updateMember
    events:
      - http:
          path: member/{Id}
          method: put

  # This is Login API to check email and password valid - DucVN
  login:
    handler: controller/login/LoginController.login
    name: login
    events:
      - http:
          path: login
          method: post
          cors: true
  # Check token everytime client send request to API- DucVN
  getInfUserByToken:
    handler: controller/login/LoginController.getInfUserByToken
    name: getUserInfo
    events:
      - http:
          path: user/info
          method: get
          cors: true

  # Verify user forgot password- DucVN
  checkForgorPassword:
    handler: controller/login/forgot-password/ForgotPasswordController.checkForgorPassword
    name: checkForgorPassword
    events:
      - http:
          path: forgot-password
          method: post
          cors: true

  # Send email- DucVN
  sendEmail:
    handler: controller/login/email/EmailController.sendEmail
    name: sendEmail
    events:
      - http:
          path: sendmail
          method: post
          cors: true

  # Get Client Info- DucVN
  getClient:
    handler: controller/login/client/ClientController.getClientInfo
    name: getClient
    events:
      - http:
          path: client
          method: post
          cors: true

  # Get Setting Password - DucVN
  settingPassword:
    handler: controller/login/setting-password/SettingPasswordController.settingPassword
    name: settingPassword
    events:
      - http:
          path: setting-password
          method: post
          cors: true

  # Check key to display setting password - DucVN
  checkKey:
    handler: controller/login/setting-password/SettingPasswordController.checkKey
    name: checkKey
    events:
      - http:
          path: check-key
          method: post
          cors: true

  # Logout - DucVN
  logout:
    handler: controller/login/LogoutController.logout
    name: logout
    events:
      - http:
          path: logout
          method: post
          cors: true

  searchPostCode:
    handler: controller/RegisterController.searchPostCode
    name: searchPostCode
    events:
      - http:
          path: search-post-code
          method: get
          cros: true

  existsEmail:
    handler: controller/RegisterController.existsEmail
    name: existsEmail
    events:
      - http:
          path: exists-mail-register
          method: get
          cros: true

  exsistsMemberCode:
    handler: controller/RegisterController.exsistsMemberCode
    name: exsistsMemberCode
    events:
      - http:
          path: exists-member-code
          method: get
          cros: true

  initRegister:
    handler: controller/RegisterController.initPage
    name: initRegister
    events:
      - http:
          path: init-page
          method: get
          cros: true

  getListAccount:
    handler: controller/AccountController.getListAccount
    name: getListAccount
    events:
      - http:
          path: accounts/index
          method: get
          cors: true
#          authorizer: authorize
  testApi:
    handler: controller/MemberController.testApi
    name: testApi
    events:
      - http:
          path: test-api
          method: get
  getListShow:
    handler: controller/ShowController.getListShow
    name: getListShow
    events:
      - http:
          path: shows
          method: post
          cors: true
  getListGenre:
    handler: controller/GenreController.getListGenre
    name: getListGenre
    events:
    - http:
        path: genres
        method: post
        cors: true
  getListNotify:
    handler: controller/NotifyController.getListNotify
    name: getListNotify
    events:
    - http:
        path: notifies
        method: post
        cors: true

  demoSendMail:
    handler: controller/RegisterController.demoSendMail
    name: demoSendMail
    events:
    - http:
        path: demo
        method: post
        cors: true

  createUser:
    handler: controller/RegisterController.createUser
    name: createUser
    events:
    - http:
        path: register
        method: post
        cors: true
