# Service Name
service: ticket-service

# plugins
plugins:
  - serverless-webpack
  - serverless-offline
#  - serverless-nested-stack
  - serverless-plugin-split-stacks

provider:
  versionFunctions: false
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-1
  profile: ${file(env.yml):profile}
  environment: ${file(env.yml):environment}

# custom
custom:
  serverless-offline:
    port: 4000
  splitStacks:
    perFunction: false
    perType: true
  webpack:
    webpackConfig: ./webpack.config.js
#    includeModules: true
  webpackIncludeModules:
      forceInclude:
        - pg

functions:
  authorize:
    handler: middleware/Authentication.handler

  # This is Login API to check email and password valid - DucVN
  login:
    handler: controller/login/LoginController.login
    name: login
    events:
      - http:
          path: login
          method: post
          cors: true

  # Check token everytime client send request to API- DucVN
  getInfUserByToken:
    handler: controller/login/LoginController.getInfUserByToken
    name: getUserInfo
    events:
      - http:
          path: user/info
          method: get
          cors: true

  # Verify user forgot password- DucVN
  checkForgorPassword:
    handler: controller/login/forgot-password/ForgotPasswordController.checkForgorPassword
    name: checkForgorPassword
    events:
      - http:
          path: forgot-password
          method: post
          cors: true

  # Send email- DucVN
  sendEmail:
    handler: controller/login/email/EmailController.sendEmail
    name: sendEmail
    events:
      - http:
          path: sendmail
          method: post
          cors: true

  # Get Client Info- DucVN
  getClient:
    handler: controller/login/client/ClientController.getClientInfo
    name: getClient
    events:
      - http:
          path: client
          method: post
          cors: true

  # Get Setting Password - DucVN
  settingPassword:
    handler: controller/login/setting-password/SettingPasswordController.settingPassword
    name: settingPassword
    events:
      - http:
          path: setting-password
          method: post
          cors: true

  # Check key to display setting password - DucVN
  checkKey:
    handler: controller/login/setting-password/SettingPasswordController.checkKey
    name: checkKey
    events:
      - http:
          path: check-key
          method: post
          cors: true

  # Logout - DucVN
  logout:
    handler: controller/login/LogoutController.logout
    name: logout
    events:
      - http:
          path: logout
          method: post
          cors: true

  # Login Admin - DucVN
  loginAdmin:
    handler: controller/login/admin/LoginAdminController.loginAdmin
    name: loginAdmin
    events:
      - http:
          path: login/admin
          method: post
          cors: true

  # ReadS3 - DucVN
  ReadS3:
    handler: controller/ReadS3Controller.readS3
    name: ReadS3
    events:
      - http:
          path: reads3
          method: get
          cors: true

  searchPostCode:
    handler: controller/RegisterController.searchPostCode
    name: searchPostCode
    events:
      - http:
          path: search-post-code
          method: get
          cors: true

  existsEmail:
    handler: controller/RegisterController.existsEmail
    name: existsEmail
    events:
      - http:
          path: exists-mail-register
          method: get
          cors: true

  exsistsMemberCode:
    handler: controller/RegisterController.exsistsMemberCode
    name: exsistsMemberCode
    events:
      - http:
          path: exists-member-code
          method: get
          cors: true

  initRegister:
    handler: controller/RegisterController.initPage
    name: initRegister
    events:
      - http:
          path: init-page
          method: get
          cors: true

  getListAccount:
    handler: controller/AccountController.getListAccount
    name: getListAccount
    events:
      - http:
          path: accounts/index
          method: get
          cors: true
#          authorizer: authorize

  getListShow:
    handler: controller/ShowController.getListShow
    name: getListShow
    description: Get list show base on request client
    events:
      - http:
          path: show/get-list
          method: post
          cors: true
          request:
            parameters:
              querystrings:
                client_id: true
                admin_time: false
                genre_no: false
                from_show_date: false
                to_show_date: false
                from_sales_date: false
                to_sales_date: false
                key_search: false
                start_position: false
                end_position: false
  getListGenre:
    handler: controller/GenreController.getListGenre
    name: getListGenre
    events:
    - http:
        path: genre/get-list
        method: get
        cors: true

  getListNotify:
    handler: controller/NotifyController.getListNotify
    name: getListNotify
    events:
    - http:
        path: notify/get-list
        method: get
        cors: true
#  Booking
  getShowInfo:
    handler: controller/BookingController.getShowInfo
    name: getShowInfo
    events:
      - http:
          path: booking-show-info
          method: get
          cors: true
  getSeatDetail:
    handler: controller/BookingController.getSeatDetail
    name: getSeatDetail
    events:
      - http:
          path: booking-seat-detail
          method: get
          cors: true
  getTicketType:
    handler: controller/BookingController.getTicketType
    name: getTicketType
    events:
      - http:
          path: booking-ticket-type
          method: get
          cors: true
  getCheckSalesTerm:
    handler: controller/BookingController.getCheckSalesTerm
    name: getCheckSalesTerm
    events:
      - http:
          path: booking-sales-term
          method: get
          cors: true
  getCheckLimitTicket:
     handler: controller/BookingController.getCheckLimitTicket
     name: getCheckLimitTicket
     events:
       - http:
           path: booking-check-limit
           method: get
           cors: true
  getCartId:
     handler: controller/BookingController.getCartId
     name: getCartId
     events:
       - http:
           path: booking-get-cart
           method: get
           cors: true
#  postCheckDesignateSeat:
#     handler: controller/BookingController.postCheckDesignateSeat
#     name: postCheckDesignateSeat
#     events:
#       - http:
#           path: booking-check-designate-seat
#           method: post
#           cors: true
  postCheckFreeSeat:
     handler: controller/BookingController.postCheckSeat
     name: postCheckFreeSeat
     events:
       - http:
           path: booking-check-seat
           method: post
           cors: true
  getCartDetail:
       handler: controller/CartController.getCartDetail
       name: getCartDetail
       events:
         - http:
             path: cart-detail
             method: get
             cors: true
  getScheduleShow:
    handler: controller/ShowController.getScheduleShow
    name: getScheduleShow
    events:
    - http:
        path: shows/schedule/get-list
        method: post
        cors: true
  createUser:
    handler: controller/RegisterController.createUser
    name: createUser
    events:
    - http:
        path: register
        method: post
        cors: true
  showDetail:
    handler: controller/ShowDetailController.getDetail
    name: showDetail
    events:
    - http:
        path: shows/detail
        method: get
        cors: true
  checkIsExpiredUrl:
    handler: controller/RegisterController.checkIsExpiredUrl
    name: checkIsExpiredUrl
    events:
    - http:
        path: init-complete-register
        method: get
        cors: true
  activeAccount:
    handler: controller/RegisterController.activeAccount
    name: activeAccount
    events:
    - http:
        path: active-account
        method: post
        cors: true
  sendMailBookingComplete:
    handler: controller/SendMailController.sendMailBookingComplete
    name: sendMailBookingComplete
    events:
    - http:
        path: sendmail-complete
        method: post
        cors: true
  myPageIndex:
    handler: controller/MyPageController.myPageIndex
    name: myPageIndex
    events:
    - http:
        path: my-page
        method: get
        cors: true
        authorizer: authorize
  historyOrder:
    handler: controller/MyPageController.historyOrder
    name: historyOrder
    events:
    - http:
        path: my-page/history-order
        method: get
        cors: true
        authorizer: authorize
  detailOrder:
    handler: controller/MyPageController.detailOrder
    name: detailOrder
    events:
    - http:
        path: my-page/detail-order
        method: get
        cors: true
        authorizer: authorize

  initUpdateProfile:
    handler: controller/MyPageController.initUpdateProfile
    name: initUpdateProfile
    events:
    - http:
        path: my-page/init-update-profile
        method: get
        cors: true
        authorizer: authorize

  checkExistsMailUpdate:
    handler: controller/MyPageController.checkExistsMailUpdate
    name: checkExistsMailUpdate
    events:
    - http:
        path: my-page/exists-mail-update
        method: get
        cors: true
        authorizer: authorize

  checkExistsLoginId:
    handler: controller/MyPageController.checkExistsLoginId
    name: checkExistsLoginId
    events:
    - http:
        path: my-page/exists-login-id
        method: get
        cors: true
        authorizer: authorize

  checkExistsOrder:
    handler: controller/MyPageController.checkExistsOrder
    name: checkExistsOrder
    events:
    - http:
        path: my-page/exists-order
        method: get
        cors: true
        authorizer: authorize
